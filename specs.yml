openapi: 3.0.2
info:
  version: "3.0.0"
  title: "CGE-API"

tags:
- name: "Source"
  externalDocs:
    description: "Find out more"
    url: "http://127.0.0.1:5000/"

paths:
  /sources:
    get:
      tags:
      - "Source"
      summary: "Returns all data sources names available in the system"
      description: ""
      operationId: "get_sources"
      responses:
        404:
          description: "No database found"
        200:
          description: "The data sources found are: "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"

  /sources/upload:
    post:
      tags:
      - "Source"
      summary: "Uploads a csv file provided by the user."
      description: "Allows the user to either upload a new dataset, add records to an existing one, or replace the old with the new."
      operationId: "upload_file"

      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - exists
                - upload
                - replace
              properties:
                file:
                  type: string
                  format: binary
                exists:
                  type: boolean
                upload:
                  type: boolean
                replace:
                  type: boolean

      responses:
          405:
            description: "Invalid input"
          200:
            description: "uploading data.."

  /indicators:
    get:
      tags:
      - "Indicator"
      summary: "Returns a list of indicators"
      description: "Returns a list of indicators for pagination"
      operationId: "get_paginated_indicator_list"

      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Indicators"
        404:
          description: "Indicators not found"

  /indicators/download:
    get:
      tags:
      - "Indicator"
      summary: "Downloads an indicator file"
      description: "Returns a file containing a list of indicators"
      operationId: "download_indicators"
      parameters:
        - in: query
          name: indicator name
          schema:
            type: string
          description: The indicator name selected by the user
      responses:
        200:
          description: "successful operation"

        400:
          description: "Bad request. Filters have not been provided or are incorrect"

  /indicators/{source}:
    get:
      tags:
        - "Indicator"
      summary: Returns all records related to a source from the indicators collection
      description: Given a specific source request by the user, shows all records related to that source
      operationId: get_indicators_from_source
      parameters:
      - in: path
        name: source   # Note the name is the same as in the path
        schema:
            type: string
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceIndicators"

        '400':
          description: Invalid ID supplied
        '404':
          description: file not found

  /search:
    get:
      tags:
        - "Indicator"
      summary: "Finds specific indicator by text search"
      operationId: "get_indicator_by_search"
      parameters:
        - in: query
          name: indicator name
          schema:
            type: string
          description: The indicator name typed by the user

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Indicators"
        '400':
          description: "No searchable text was provided"


  /columns/plot/average:
    post:
      tags:
      - "Columns"
      summary: "Requests an indicator's value average plotting based on a variable number of inputs"
      description: "A value average is returned to visualize some indicator trend on the graph, which can be determined by either filtering the search by year and value unit, or just one of the two."
      operationId: "post_income_group_average"
      parameters:
        - in: query
          name: indicator name
          schema:
            type: object
            example: {"name": "Gene"}
          description: The indicator name selected by the user
          required: true
        - in: query
          name: value unit
          schema:
            type: object
            example: {"value unit": "%"}
          description: The unit of the value requested
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AveragePlot"
        400:
          description: "Bad request. Filters have not been provided or are incorrect"
        404:
          description: "Data was not found."

  /columns/plot/{DataFormat}:
    post:
      tags:
      - "Columns"
      summary: "It generates all combinations of plotting values based on the attributes we receive from the user."
      description: "There are two scenarios we can have for labels: (a) years
                    and (b) country codes. We also want to offer the functionality of submitting multiple filters when requesting data (instead of sending multiple requests).
                    In this example, we are actually using (a) years as the label, since it's not being included in the query. In
                    addition, we are also giving back 3x2x1 = 6 value sets back, i.e. with all values with filters
                    ['ISL', 'Grapes', 'kg'] being the first set."
      operationId: "get_values"
      parameters:
        - in: path
          required: True
          name: DataFormat
          schema:
            $ref: "#/components/schemas/DataFormat"
        - in: query
          name: country
          schema:
            $ref: "#/components/schemas/Country"
          description: The indicator name selected by the user
        - in: query
          name: year
          schema:
            $ref: "#/components/schemas/Year"
          description: the year in which such indicator occurs in time
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllInfoPlot"
        400:
          description: "Bad request. Filters have not been provided or are incorrect"

  /columns/filter:
    post:
      tags:
      - "Columns"
      summary: "Returns a list of columns whose values are filtered
                based on values selected for other columns in the form"
      operationId: "filter_columns"
      parameters:
        - in: query
          name: country
          schema:
            $ref: "#/components/schemas/Country"
          description: The indicator name selected by the user
        - in: query
          name: year
          schema:
            $ref: "#/components/schemas/Year"
          description: the year in which such indicator occurs in time
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteredColumns"
        400:
          description: "Bad request. Filters have not been provided or are incorrect"

  /categories:
    get:
      tags:
      - "Category"
      summary: "Returns a list of all available categories."

      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Categories"
        404:
          description: "No categories found."

  /auth:
    post:
      tags:
      - "Auth"
      summary: "Allows User to log in"
      description: "Action required by any user who wants to upload a file."
      operationId: "createUser"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: "successful operation"
        401:
          description: "Failed log in"


  # /user/createWithArray:
  #   post:
  #     tags:
  #     - "user"
  #     summary: "Creates list of users with given input array"
  #     description: ""
  #     operationId: "createUsersWithArrayInput"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "body"
  #       description: "List of user object"
  #       required: true
  #       schema:
  #         type: "array"
  #         items:
  #           $ref: "#/definitions/User"
  #     responses:
  #       default:
  #         description: "successful operation"
  # /user/login:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Logs user into the system"
  #     description: ""
  #     operationId: "loginUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "query"
  #       description: "The user name for login"
  #       required: true
  #       type: "string"
  #     - name: "password"
  #       in: "query"
  #       description: "The password for login in clear text"
  #       required: true
  #       type: "string"
  #     responses:
  #       200:
  #         description: "successful operation"
  #         schema:
  #           type: "string"
  #         headers:
  #           X-Rate-Limit:
  #             type: "integer"
  #             format: "int32"
  #             description: "calls per hour allowed by the user"
  #           X-Expires-After:
  #             type: "string"
  #             format: "date-time"
  #             description: "date in UTC when token expires"
  #       400:
  #         description: "Invalid username/password supplied"
  # /user/logout:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Logs out current logged in user session"
  #     description: ""
  #     operationId: "logoutUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters: []
  #     responses:
  #       default:
  #         description: "successful operation"
  # /user/{username}:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Get user by user name"
  #     description: ""
  #     operationId: "getUserByName"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "path"
  #       description: "The name that needs to be fetched. Use user1 for testing. "
  #       required: true
  #       type: "string"
  #     responses:
  #       200:
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/User"
  #       400:
  #         description: "Invalid username supplied"
  #       404:
  #         description: "User not found"
  #   put:
  #     tags:
  #     - "user"
  #     summary: "Updated user"
  #     description: "This can only be done by the logged in user."
  #     operationId: "updateUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "path"
  #       description: "name that need to be updated"
  #       required: true
  #       type: "string"
  #     - in: "body"
  #       name: "body"
  #       description: "Updated user object"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/User"
  #     responses:
  #       400:
  #         description: "Invalid user supplied"
  #       404:
  #         description: "User not found"
  #   delete:
  #     tags:
  #     - "user"
  #     summary: "Delete user"
  #     description: "This can only be done by the logged in user."
  #     operationId: "deleteUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "path"
  #       description: "The name that needs to be deleted"
  #       required: true
  #       type: "string"
  #     responses:
  #       400:
  #         description: "Invalid username supplied"
  #       404:
  #         description: "User not found"

components:
  schemas:
    User:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
      xml:
        name: "User"

    Source:
      type: object
      properties:
        sources:
          type: string
          example: ["DTU Food", "WolrdBank", "FAO"]

    Indicators:
      type: object
      properties:
        indicators:
          type: array
          items:
            properties:
              name:
                type: string
                example: "Gene"
              type:
                type: string
                example: "ah45lf"


    Indicator:
      type: object
      properties:
        name:
          type: string
          example: "Gene"
        type:
          type: string
          example: "ah45lf"


    AveragePlot:
      type: "object"
      properties:
        graph elements:
          type: array
          items:
            required:
            - "value"
            properties:
             name:
              type: string
              example: Gene
             average:
                type: "number"
                example: 45.2
             value unit:
                type: string
                example: "%"
             year:
              type: array
              items:
               type: number
               example: [1986, 1987, 1999, 2002]

    AllInfoPlot:
      type: "object"
      properties:
        graph elements:
          type: array
          items:
            required:
            - "value"
            properties:
             file name:
              type: string
              example: fao_file
             region:
                type: string
                example: "South Asia"
             income group:
              type: string
              example: "low income"
             source:
              type: string
              example: "FAO"

    FilteredColumns:
      type: object
      properties:
        Country:
          $ref: "#/components/schemas/Country"
        Year:
          $ref: "#/components/schemas/Year"
        Indicator:
          $ref: "#/components/schemas/Indicator"
        Category:
          $ref: "#/components/schemas/Category"


    SourceIndicators:
      type: "object"
      properties:
        DTU Food:
          type: array
          items:
            required:
            - "value"
            properties:
             name:
              type: string
              example: "Gene"
             type:
                type: string
                example: "yr4g6"

    DataFormat:
      type: object
      properties:
        value unit:
          type: string
          example: "%"

    Year:
      type: integer
      example: 1998

    Country:
      type: string
      example: "Austria"

    Categories:
      type: object
      properties:
        category:
          type: string
          example: ["Health", "Food", "People"]

    Category:
      type: string
      example: "Health"
